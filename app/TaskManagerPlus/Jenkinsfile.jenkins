pipeline {
    agent any

    environment {
        ANDROID_HOME = "C:\\Users\\maico\\AppData\\Local\\Android\\Sdk"
        PATH = "${env.ANDROID_HOME}\\tools;${env.ANDROID_HOME}\\platform-tools;${env.PATH}"
        AVD_NAME = "Galaxy_A22_5G_API_33_-_Local"
        GRADLE_USER_HOME = "${env.WORKSPACE}\\.gradle"        
        APP_PACKAGE = "maif.taskmanagerplus"
		APK_OUTPUT_DIR = "C:\\ApksGenerated"
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Starting Checkout stage'
                git branch: 'main',
                    url: 'https://github.com/maiconfang/taskmanagerplus-android-app.git',
                    credentialsId: 'github-pat'
                echo 'Checkout completed successfully'
            }
        }
		
		stage('Prepare Destination Folders') {
            steps {
                echo 'Creating destination folder apk-outputs within the workspace if it does not exist.'
                bat 'if not exist apk-outputs mkdir apk-outputs'
                echo "Creating external folder ${env.APK_OUTPUT_DIR} if it does not exist."
                bat "if not exist \"${env.APK_OUTPUT_DIR}\" mkdir \"${env.APK_OUTPUT_DIR}\""
            }
        }

        stage('Clean Folder C:\\ApksGenerated') {
            steps {
                echo "Cleaning ${env.APK_OUTPUT_DIR} folder before copying the new APK."
                bat "del /Q \"${env.APK_OUTPUT_DIR}\\*\""
            }
        }

        stage('Build Application') {
            steps {
                echo 'Starting Build Application stage'
                bat 'cd app\\TaskManagerPlus && .\\gradlew.bat clean assembleDebug --info'
                echo 'Build Application completed successfully'
            }
        }

        stage('Verify Generated APK') {
            steps {
                echo 'Verifying if the APK was generated in the expected folder:'
                bat 'dir app\\TaskManagerPlus\\app\\build\\outputs\\apk\\debug'
                bat '''
                    if exist app\\TaskManagerPlus\\app\\build\\outputs\\apk\\debug\\app-debug.apk (
                        echo APK generated successfully.
                    ) else (
                        echo APK NOT found in the build folder!
                        exit /b 1
                    )
                '''
            }
        }

        stage('Copy APK to apk-outputs') {
            steps {
                echo 'Copying APK to the apk-outputs folder within the workspace'
                bat 'copy "app\\TaskManagerPlus\\app\\build\\outputs\\apk\\debug\\app-debug.apk" "apk-outputs\\TaskManagerPlus-debug.apk"'
            }
        }

        stage('Copy APK to C:\\ApksGenerated') {
            steps {
                script {
                    def timestamp = new Date().format("dd-MM-yyyy_HH-mm-ss")
                    echo "Timestamp for APK: ${timestamp}"
                    bat """
                        copy "app\\TaskManagerPlus\\app\\build\\outputs\\apk\\debug\\app-debug.apk" "C:\\ApksGenerated\\TaskManagerPlus-debug-${timestamp}.apk"
                    """
                }
            }
        }


        stage('Start Emulator') {
            steps {
                script {
                    echo 'Starting Android emulator with wipe data'
                    bat """
                        start "Emulator" "${env.ANDROID_HOME}\\emulator\\emulator.exe" -avd "${env.AVD_NAME}" -wipe-data -no-window -no-audio -gpu swiftshader_indirect
                        "${env.ANDROID_HOME}\\platform-tools\\adb.exe" wait-for-device
                    """
                    echo 'Emulator should now be started and configured with wiped data'
                }
            }
        }

        stage('Wait for Emulator to Boot') {
            steps {
                script {
                    echo 'Waiting for emulator to fully boot'
                    def booted = false
                    def maxRetries = 30
                    def retries = 0
                    while (!booted && retries < maxRetries) {
                        try {
                            def output = bat(script: 'adb shell getprop init.svc.bootanim', returnStdout: true).trim()
                            if (output.contains("stopped")) {
                                booted = true
                                echo 'Emulator booted and is responsive.'
                            } else {
                                echo 'Emulator not fully responsive. Waiting...'
                                sleep time: 5, unit: 'SECONDS'
                                retries++
                            }
                        } catch (e) {
                            echo 'Error checking emulator. Retrying...'
                            sleep time: 5, unit: 'SECONDS'
                            retries++
                        }
                    }
                    if (!booted) {
                        error 'Emulator failed to boot within the expected time.'
                    }
                }
            }
        }

        stage('Install APK on Emulator') {
            steps {
                echo 'Installing APK on emulator'
                bat 'adb install -r apk-outputs\\TaskManagerPlus-debug.apk'
            }
        }

		stage('Verify Installed APK') {
			steps {
				echo 'Checking if APK is installed on emulator'
				bat """
					adb shell pm list packages | findstr "${env.APP_PACKAGE}"
				"""
			}
		}


        stage('Run Tests') {
            steps {
                echo 'Running Automated Tests'
                bat 'cd app\\TaskManagerPlus && .\\gradlew.bat connectedAndroidTest --info'
                echo 'Tests completed successfully'
            }
        }

        stage('Publish Test Report (HTML)') {
            steps {
                echo 'Publishing HTML Test Report'
                publishHTML(target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: 'app/TaskManagerPlus/app/build/reports/androidTests/connected/debug',
                    reportFiles: 'index.html',
                    reportName: 'Android Test Report'
                ])
                echo 'HTML Test Report published'
            }
        }

        stage('Build APK Release') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                echo 'Starting Build APK Release'
                bat 'cd app\\TaskManagerPlus && .\\gradlew.bat assembleRelease --info'
                echo 'Build APK Release completed'
            }
        }

        stage('Verify Generated APK Release') {
            steps {
                echo 'Verifying release APK'
                bat 'dir app\\TaskManagerPlus\\app\\build\\outputs\\apk\\release'
            }
        }



		stage('Copy APK to apk-outputs') {
			steps {
				echo 'Copying APK to the apk-outputs folder within the workspace'
				bat 'copy "app\\TaskManagerPlus\\app\\build\\outputs\\apk\\debug\\app-debug.apk" "apk-outputs\\TaskManagerPlus-debug.apk"'
			}
		}


        stage('Verify APK in New Folder (apk-outputs)') {
            steps {
                echo 'Verifying if the APK was copied to the apk-outputs folder'
                bat 'dir apk-outputs'
                bat '''
                    if exist apk-outputs\\TaskManagerPlus-debug.apk (
                        echo APK copied successfully to apk-outputs.
                    ) else (
                        echo APK NOT found in the apk-outputs folder!
                        exit /b 1
                    )
                '''
            }
        }

        stage('Stop Emulator') {
            steps {
                echo 'Stopping Emulator'
                bat 'adb emu kill'
                echo 'Emulator stopped'
            }
        }
    }

    post {
        success {
            archiveArtifacts artifacts: 'apk-outputs/TaskManagerPlus-debug.apk', allowEmptyArchive: false
            archiveArtifacts artifacts: 'app/TaskManagerPlus/app/build/outputs/apk/release/app-release-unsigned.apk', allowEmptyArchive: false
        }
        failure {
            echo 'Build failed. No APK generated due to test failures.'
        }
        always {
            echo 'Pipeline completed'
        }
    }
}
