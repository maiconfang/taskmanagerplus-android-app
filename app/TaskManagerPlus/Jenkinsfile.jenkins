pipeline {
    agent any

    environment {
        ANDROID_HOME = "C:\\Users\\maico\\AppData\\Local\\Android\\Sdk"
        PATH = "${env.ANDROID_HOME}\\tools;${env.ANDROID_HOME}\\platform-tools;${env.PATH}"
        AVD_NAME = "Galaxy A22 5G API 33 - Local"
        GRADLE_USER_HOME = "${env.WORKSPACE}\\.gradle"
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Starting Checkout stage'
                git branch: 'main',
                    url: 'https://github.com/maiconfang/taskmanagerplus-android-app.git',
                    credentialsId: 'github-pat'
                echo 'Checkout completed successfully'
            }
        }

        stage('Prepare Destination Folders') {
            steps {
                echo 'Creating destination folder apk-outputs within the workspace if it does not exist.'
                bat 'if not exist apk-outputs mkdir apk-outputs'
                echo 'Creating external folder C:\\ApksGenerated if it does not exist.'
                bat 'if not exist C:\\ApksGenerated mkdir C:\\ApksGenerated'
            }
        }

        stage('Clean Folder C:\\ApksGenerated') {
            steps {
                echo 'Cleaning C:\\ApksGenerated folder before copying the new APK.'
                bat 'del /Q "C:\\ApksGenerated\\*"'
            }
        }

        stage('Build Application') {
            steps {
                echo 'Starting Build Application stage'
                bat 'cd app\\TaskManagerPlus && .\\gradlew.bat clean assembleDebug --info'
                echo 'Build Application completed successfully'
            }
        }

        stage('Verify Generated APK') {
            steps {
                echo 'Verifying if the APK was generated in the expected folder:'
                bat 'dir app\\TaskManagerPlus\\app\\build\\outputs\\apk\\debug'
                bat '''
                    if exist app\\TaskManagerPlus\\app\\build\\outputs\\apk\\debug\\app-debug.apk (
                        echo APK generated successfully.
                    ) else (
                        echo APK NOT found in the build folder!
                        exit /b 1
                    )
                '''
            }
        }

        stage('Copy APK to apk-outputs') {
            steps {
                echo 'Copying APK to the apk-outputs folder within the workspace'
                bat 'copy "app\\TaskManagerPlus\\app\\build\\outputs\\apk\\debug\\app-debug.apk" "apk-outputs\\TaskManagerPlus-debug.apk"'
            }
        }

        stage('Copy APK to C:\\ApksGenerated') {
            steps {
                script {
                    def timestamp = new Date().format("dd-MM-yyyy_HH-mm-ss")
                    bat """
                        copy "app\\TaskManagerPlus\\app\\build\\outputs\\apk\\debug\\app-debug.apk" "C:\\ApksGenerated\\TaskManagerPlus-debug-${timestamp}.apk"
                    """
                }
            }
        }

        stage('Verify APK in New Folder (apk-outputs)') {
            steps {
                echo 'Verifying if the APK was copied to the apk-outputs folder'
                bat 'dir apk-outputs'
                bat '''
                    if exist apk-outputs\\TaskManagerPlus-debug.apk (
                        echo APK copied successfully to apk-outputs.
                    ) else (
                        echo APK NOT found in the apk-outputs folder!
                        exit /b 1
                    )
                '''
            }
        }

        stage('Start Emulator') {
            steps {
                script {
                    echo 'Starting Android emulator'
                    bat """
                        start /B emulator -avd "${env.AVD_NAME}" -no-window -no-audio
                        timeout /t 60
                        adb wait-for-device
                        adb shell settings put global window_animation_scale 0
                        adb shell settings put global transition_animation_scale 0
                        adb shell settings put global animator_duration_scale 0
                    """
                    echo 'Emulator started and configured'
                }
            }
        }

        stage('Run Tests') {
            steps {
                echo 'Running Automated Tests'
                bat 'cd app\\TaskManagerPlus && .\\gradlew.bat connectedAndroidTest --info'
                echo 'Tests completed successfully'
            }
        }

        stage('Publish Test Report (HTML)') {
            steps {
                echo 'Publishing HTML Test Report'
                publishHTML(target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: 'app/TaskManagerPlus/app/build/reports/androidTests/connected/debug',
                    reportFiles: 'index.html',
                    reportName: 'Android Test Report'
                ])
                echo 'HTML Test Report published'
            }
        }

        stage('Build APK Release') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                echo 'Starting Build APK Release stage'
                bat 'cd app\\TaskManagerPlus && .\\gradlew.bat assembleRelease --info'
                echo 'Build APK Release completed successfully'
            }
        }

        stage('Verify Generated APK Release') {
            steps {
                echo 'Verifying if the release APK was generated in the expected folder:'
                bat 'dir app\\TaskManagerPlus\\app\\build\\outputs\\apk\\release'
            }
        }

        stage('Stop Emulator') {
            steps {
                echo 'Stopping Android Emulator'
                bat 'adb emu kill'
                echo 'Emulator stopped'
            }
        }
    }

    post {
        success {
            // Stores the debug APK from the apk-outputs folder as an artifact
            archiveArtifacts artifacts: 'apk-outputs/TaskManagerPlus-debug.apk', allowEmptyArchive: false

            // Stores the unsigned release APK as an artifact
            archiveArtifacts artifacts: 'app/TaskManagerPlus/app/build/outputs/apk/release/app-release-unsigned.apk', allowEmptyArchive: false
        }
        failure {
            echo 'The build failed. The APK will not be generated due to test failures.'
        }
        always {
            echo 'Pipeline completed'
        }
    }
}
