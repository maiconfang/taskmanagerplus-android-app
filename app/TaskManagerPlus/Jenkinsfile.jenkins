pipeline {
    agent any

    environment {
        ANDROID_HOME = "C:\\Users\\maico\\AppData\\Local\\Android\\Sdk"
        PATH = "${env.ANDROID_HOME}\\tools;${env.ANDROID_HOME}\\platform-tools;${env.PATH}"
        AVD_NAME = "Galaxy_A22_5G_API_33_-_Local"
        GRADLE_USER_HOME = "${env.WORKSPACE}\\.gradle"        
        APP_PACKAGE = "maif.taskmanagerplus"
		APK_OUTPUT_DIR = "C:\\ApksGenerated"
    }

    stages {
		// Checkout code from the Git repository 
        stage('Checkout') {
            steps {
                echo 'Starting Checkout stage'
                git branch: 'main',
                    url: 'https://github.com/maiconfang/taskmanagerplus-android-app.git',
                    credentialsId: 'github-pat-global'
                echo 'Checkout completed successfully'
            }
        }
		
		// Prepare folders for storing APKs
		stage('Prepare Destination Folders') {
            steps {
                echo 'Creating destination folder apk-outputs within the workspace if it does not exist.'
                bat 'if not exist apk-outputs mkdir apk-outputs'
                echo "Creating external folder ${env.APK_OUTPUT_DIR} if it does not exist."
                bat "if not exist \"${env.APK_OUTPUT_DIR}\" mkdir \"${env.APK_OUTPUT_DIR}\""
            }
        }

		// Clean the C:\ApksGenerated folder before storing new APK
        stage('Clean Folder C:\\ApksGenerated') {
            steps {
                echo "Cleaning ${env.APK_OUTPUT_DIR} folder before copying the new APK."
                bat "del /Q \"${env.APK_OUTPUT_DIR}\\*\""
            }
        }

		// Build the debug APK
        stage('Build Application') {
            steps {
                echo 'Starting Build Application stage'
                bat 'cd app\\TaskManagerPlus && .\\gradlew.bat clean assembleDebug --info'
                echo 'Build Application completed successfully'
            }
        }

		// Verify if the debug APK was generated
        stage('Verify Generated APK') {
            steps {
                echo 'Verifying if the APK was generated in the expected folder:'
                bat 'dir app\\TaskManagerPlus\\app\\build\\outputs\\apk\\debug'
                bat '''
                    if exist app\\TaskManagerPlus\\app\\build\\outputs\\apk\\debug\\app-debug.apk (
                        echo APK generated successfully.
                    ) else (
                        echo APK NOT found in the build folder!
                        exit /b 1
                    )
                '''
            }
        }
		
		// Copy the generated APK to C:\ApksGenerated with a timestamp 
		stage('Copy APK to C:\\ApksGenerated') {
			steps {
				script {
					def timestamp = new Date().format("dd-MM-yyyy_HH-mm-ss")
					echo "Copying APK to C:\\ApksGenerated with timestamp ${timestamp}"
					bat """
						copy "app\\TaskManagerPlus\\app\\build\\outputs\\apk\\debug\\app-debug.apk" "C:\\ApksGenerated\\TaskManagerPlus-debug-${timestamp}.apk"
					"""
					// Defina o caminho completo do APK com timestamp para uso posterior
					env.APK_PATH = "C:\\ApksGenerated\\TaskManagerPlus-debug-${timestamp}.apk"
				}
			}
		}


		// Start the Android emulator with a data wipe only if not already running
		stage('Start Emulator') {
			steps {
				script {
					// Check if the emulator is running
					def emulatorStatus = bat(script: "${env.ANDROID_HOME}\\platform-tools\\adb.exe devices", returnStdout: true)

					if (!emulatorStatus.contains("emulator")) {
						echo 'Emulator not running. Starting Android emulator with wiped data...'
						bat """
							start "Emulator" "${env.ANDROID_HOME}\\emulator\\emulator.exe" -avd "${env.AVD_NAME}" -no-window -no-audio -gpu swiftshader_indirect 
							"${env.ANDROID_HOME}\\platform-tools\\adb.exe" wait-for-device
						"""
						// Wait for a while to ensure the emulator initializes completely
						sleep(time: 60, unit: 'SECONDS')
						echo 'Emulator started and configured with wiped data'
					} else {
						echo 'Emulator is already running.'
					}
				}
			}
		}


		// Wait for the emulator to finish booting
        stage('Wait for Emulator to Boot') {
            steps {
                script {
                    echo 'Waiting for emulator to fully boot'
                    def booted = false
                    def maxRetries = 30
                    def retries = 0
                    while (!booted && retries < maxRetries) {
                        try {
                            def output = bat(script: 'adb shell getprop init.svc.bootanim', returnStdout: true).trim()
                            if (output.contains("stopped")) {
                                booted = true
                                echo 'Emulator booted and is responsive.'
                            } else {
                                echo 'Emulator not fully responsive. Waiting...'
                                sleep time: 5, unit: 'SECONDS'
                                retries++
                            }
                        } catch (e) {
                            echo 'Error checking emulator. Retrying...'
                            sleep time: 5, unit: 'SECONDS'
                            retries++
                        }
                    }
                    if (!booted) {
                        error 'Emulator failed to boot within the expected time.'
                    }
                }
            }
        }

		// Install the generated APK on the emulator
		stage('Install APK on Emulator') {
			steps {
				echo "Installing APK on emulator from ${env.APK_PATH}"
				bat "adb install -r \"${env.APK_PATH}\""
			}
		}

		// Verify if the APK is installed on the emulator
		stage('Verify Installed APK') {
			steps {
				echo 'Checking if APK is installed on emulator'
				bat """
					adb shell pm list packages | findstr "${env.APP_PACKAGE}"
				"""
			}
		}
		
		stage('Prepare Environment') {
			steps {
				echo 'Disabling animations on the emulator'
				// Desativa as animações no emulador para evitar interferência nos testes
				bat 'adb shell settings put global window_animation_scale 0'
				bat 'adb shell settings put global transition_animation_scale 0'
				bat 'adb shell settings put global animator_duration_scale 0'
			}
		}

		// Run automated tests on the installed APK
        stage('Run Tests') {
            steps {
                echo 'Running Automated Tests'
                bat 'cd app\\TaskManagerPlus && .\\gradlew.bat connectedAndroidTest --info'
                echo 'Tests completed successfully'
            }
        }

		// Publish the test report as an HTML file
        stage('Publish Test Report (HTML)') {
            steps {
                echo 'Publishing HTML Test Report'
                publishHTML(target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: 'app/TaskManagerPlus/app/build/reports/androidTests/connected/debug',
                    reportFiles: 'index.html',
                    reportName: 'Android Test Report'
                ])
                echo 'HTML Test Report published'
            }
        }

		// Build the release APK for deployment
        stage('Build APK Release') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                echo 'Starting Build APK Release'
                bat 'cd app\\TaskManagerPlus && .\\gradlew.bat assembleRelease --info'
                echo 'Build APK Release completed'
            }
        }

		// Verify if the release APK was generated
        stage('Verify Generated APK Release') {
            steps {
                echo 'Verifying release APK'
                bat 'dir app\\TaskManagerPlus\\app\\build\\outputs\\apk\\release'
            }
        }

		// Clean old APKs from apk-outputs before copying new APK
		stage('Clean APK Outputs') {
			steps {
				echo 'Cleaning old APK files from apk-outputs folder'
				bat 'del /Q apk-outputs\\*'
			}
		}

		// Copy the APK to a workspace folder for archiving with a timestamp
		stage('Copy APK to apk-outputs') {
			steps {
				script {
					def timestamp = new Date().format("dd-MM-yyyy_HH-mm-ss")
					echo "Copying APK to the apk-outputs folder within the workspace with timestamp ${timestamp}"
					bat """
						copy "app\\TaskManagerPlus\\app\\build\\outputs\\apk\\debug\\app-debug.apk" "apk-outputs\\TaskManagerPlus-debug-${timestamp}.apk"
					"""
					// Sets the full APK path with timestamp for later use
					env.APK_PATH_WORKSPACE = "apk-outputs\\TaskManagerPlus-debug-${timestamp}.apk"
				}
			}
		}


		// Verify if the APK is in the apk-outputs folder
		stage('Verify APK in New Folder (apk-outputs)') {
			steps {
				echo 'Verifying if the APK was copied to the apk-outputs folder'
				bat 'dir apk-outputs'
				bat '''
					set apkFound=false
					for %%f in (apk-outputs\\TaskManagerPlus-debug-*.apk) do (
						set apkFound=true
						echo APK found: %%f
						goto :EOF
					)
					if not %apkFound% (
						echo APK NOT found in the apk-outputs folder!
						exit /b 1
					)
				'''
			}
		}


		// Stop the Android emulator after testing
        stage('Stop Emulator') {
            steps {
                echo 'Stopping Emulator'
                bat 'adb emu kill'
                echo 'Emulator stopped'
            }
        }
    }

	post {
		success {
			// Uses a wildcard to find any APK that starts with "TaskManagerPlus-debug"
			archiveArtifacts artifacts: 'apk-outputs/TaskManagerPlus-debug-*.apk', allowEmptyArchive: false
			archiveArtifacts artifacts: 'app/TaskManagerPlus/app/build/outputs/apk/release/app-release-unsigned.apk', allowEmptyArchive: false
		}
		failure {
			echo 'Build failed. No APK generated due to test failures.'
		}
		always {
			echo 'Pipeline completed'
		}
	}

}
